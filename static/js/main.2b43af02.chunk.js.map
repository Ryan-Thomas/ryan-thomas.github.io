{"version":3,"sources":["components/Note.js","components/Prompt.js","App.js","serviceWorker.js","index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","initialState","react_default","a","createElement","id","_ref","console","log","setState","document","getElementById","innerHTML","update","VF","Vex","Flow","div","renderer","Renderer","Backends","SVG","resize","context","getContext","setFont","setBackgroundFillStyle","stave","Stave","addClef","clef","setContext","draw","notes","StaveNote","keys","concat","letter","number","duration","voices","Voice","num_beats","beat_value","addTickables","Formatter","joinVoices","format","group","openGroup","forEach","v","closeGroup","Component","Prompt","resetNote","bind","assertThisInitialized","handleChange","handleSubmit","checkResult","event","value","target","trim","toLowerCase","preventDefault","letters","clefs","Math","floor","random","length","numbers","objectSpread","result","innerText","style","color","setTimeout","_this2","components_Note","className","onClick","onSubmit","type","onChange","App","components_Prompt","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b43af02.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Vex from 'vexflow';\n\nclass Note extends Component {\n    constructor(props) {\n        super(props);\n        this.state = this.props.initialState\n    }\n    \n    render() {\n        return <div id=\"note\"></div>\n    }\n    \n    componentWillReceiveProps({initialState}) {\n        console.log(\"Component received props: \");\n        console.log(initialState);\n        this.setState(initialState);\n    }\n    \n    componentWillUpdate() {\n        console.log(\"Component Will Update\")\n        document.getElementById(\"note\").innerHTML = '<div id=\"note\"></div>';\n    }\n    \n    componentDidMount() {\n        this.update();\n    }\n    \n    componentDidUpdate() {\n        this.update();\n    }\n    \n    update() {\n        console.log('this.state', this.state)\n        this.VF = Vex.Flow;\n        \n        // Create an SVG renderer and attach it to the DIV element named \"boo\".\n        this.div = document.getElementById(\"note\")\n        console.log(this.div);\n        this.renderer = new this.VF.Renderer(this.div, this.VF.Renderer.Backends.SVG);\n        \n        // Configure the rendering context.\n        this.renderer.resize(250, 250);\n        const context = this.renderer.getContext();\n        context.setFont(\"Arial\", 10, \"\").setBackgroundFillStyle(\"#eed\");\n        \n        // Create a stave of width 400 at position 10, 40 on the canvas.\n        const stave = new this.VF.Stave(10, 40, 200);\n        \n        // Add a clef and time signature.\n        stave.addClef(this.state.clef);\n        \n        // Connect it to the rendering context and draw!\n        stave.setContext(context).draw();\n        \n        const notes = [\n            new this.VF.StaveNote({clef: this.state.clef, keys: [`${this.state.letter}/${this.state.number}`], duration: \"q\" }),\n        ];\n        \n        // Create a voice in 4/4 and add above notes\n        var voices = [\n            new this.VF.Voice({num_beats: 1,  beat_value: 4}).addTickables(notes),\n        ]\n        \n        // Format and justify the notes to 400 pixels.\n        new this.VF.Formatter().joinVoices(voices).format(voices, 250);\n        \n        // Render voices\n        this.group = context.openGroup();\n        voices.forEach(function(v) { v.draw(context, stave); })\n        context.closeGroup();\n    }\n    \n}\n\nNote.propTypes = {\n    initialState: PropTypes.object.isRequired,\n};\n\nexport default Note;","import React, { Component } from 'react';\nimport Note from './Note';\n\n/**\n * This component shows the user a Note and asks them what it is\n */\nclass Prompt extends Component {\n  constructor(props) {\n    super(props);\n    this.resetNote = this.resetNote.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.checkResult = this.checkResult.bind(this);\n  }\n  \n  handleChange(event) {\n    this.setState({value: event.target.value.trim().toLowerCase()});\n  }\n  \n  handleSubmit(event) {\n    this.checkResult();\n    event.preventDefault();\n  }\n  \n  resetNote() {\n    const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n    const clefs = [\"treble\", \"bass\"];\n    const letter = letters[Math.floor(Math.random() * letters.length)];\n    const clef = clefs[Math.floor(Math.random() * clefs.length)];\n    let numbers = [];\n    if (clef === \"treble\") {\n      numbers = [4, 5, 6];\n    } else {\n      numbers = [2, 3];\n    }\n    const number = numbers[Math.floor(Math.random() * numbers.length)];\n    this.setState({...this.state, letter, clef, number});\n  }\n  \n  componentWillMount() {\n    this.resetNote();\n  }\n  \n  checkResult() {\n    const result = document.getElementById(\"result\")\n    if (this.state.value === this.state.letter) {\n      this.resetNote();\n      result.innerText  = `'${this.state.value}' was Correct`\n      result.style.color = \"green\"; \n      setTimeout(() => result.style.color = \"black\", 1000);\n    } else {\n      result.innerText  = `'${this.state.value}' is Incorrect`\n      result.style.color = \"red\"; \n      setTimeout(() => result.style.color = \"black\", 1000);\n    }\n  }\n  \n  render() {\n    return (\n      <div>\n        <Note initialState={{\"letter\": this.state.letter, \n                             \"number\": this.state.number, \n                             \"clef\": this.state.clef}} />\n        <button className=\"btn btn-primary\" onClick={() => this.setState({...this.state, value: 'a'}, this.checkResult)}>a</button>\n        &nbsp;&nbsp;\n        <button className=\"btn btn-primary\" onClick={() => this.setState({...this.state, value: 'b'}, this.checkResult)}>b</button>\n        &nbsp;&nbsp;\n        <button className=\"btn btn-primary\" onClick={() => this.setState({...this.state, value: 'c'}, this.checkResult)}>c</button>\n        &nbsp;&nbsp;\n        <button className=\"btn btn-primary\" onClick={() => this.setState({...this.state, value: 'd'}, this.checkResult)}>d</button>\n        &nbsp;&nbsp;\n        <br />\n        <br />\n        <button className=\"btn btn-primary\" onClick={() => this.setState({...this.state, value: 'e'}, this.checkResult)}>e</button>\n        &nbsp;&nbsp;\n        <button className=\"btn btn-primary\" onClick={() => this.setState({...this.state, value: 'f'}, this.checkResult)}>f</button>\n        &nbsp;&nbsp;\n        <button className=\"btn btn-primary\" onClick={() => this.setState({...this.state, value: 'g'}, this.checkResult)}>g</button>\n        <br />\n        <br />\n        <form onSubmit={this.handleSubmit}>\n\n          <br />\n\n          <label>\n            Answer:&nbsp;\n            <input type=\"text\" onChange={this.handleChange} />\n          </label>\n\n          <br />\n\n          <input className=\"btn btn-primary btn-lg\" type=\"submit\" value=\"Submit\" />\n        </form>\n        <br />\n        <h2 id=\"result\"> </h2>\n      </div>\n    );\n  }\n}\n  \n  export default Prompt;","import React, { Component } from 'react';\nimport './App.css';\nimport Prompt from './components/Prompt';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Prompt />\n      </div>\n      );\n    }\n  }\n  \n  export default App;\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}